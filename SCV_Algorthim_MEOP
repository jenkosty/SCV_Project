%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Algorithm to Detect MEOP SCVs %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% QUALITY CONTROL THRESHOLDS
qc.min_depth    = [350]; % minimum depth to be considered a 'good' profile
qc.min_profiles = [100];   % minimum number of 'good' profiles for a timeseries
qc.max_time_gap = [5];   % max gap (days) between 'good' profiles before rejection

dbar_grid = 1:500;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DATA LOADING AND MANIPULATION

meop_data = interp_meop_data;

%%% Grab MEOP meta data (tag num, date) and group them into time-series
for i = 1:length(meop_data)
    tagnum(i)   = meop_data(i).tag; % tag num
    profdate(i) = datenum(meop_data(i).time); % date
end

%%% Get unique tag numbers
taglist = unique(tagnum);

%%% Go through each tagnum and assign a cast number
meop_ts = [];
for i = 1:length(taglist)
	%%% Find profiles with that tagnum
	tagidx = find(tagnum == taglist(i));

	%%% Start meop time-series
	meop_ts(i).tag = taglist(i);

	%%% Sort the profiles by date
	[a,b] = sort(profdate(tagidx),'ascend');

	%%% Go through all instances of the same tag and fill in the data
	for j = 1:length(b)
		meop_ts(i).cast(j)   = j;						  % cast number
		meop_ts(i).lat(j)    = meop_data(tagidx(j)).lat;  % latitude
		meop_ts(i).lon(j)    = meop_data(tagidx(j)).lon;  % longitude
		meop_ts(i).time(j,:) = meop_data(tagidx(j)).time; % cast date
		meop_ts(i).salt(:,j) = meop_data(tagidx(j)).salt; % salinity
		meop_ts(i).temp(:,j) = meop_data(tagidx(j)).temp; % temperature
	end	
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% FIRST QC FLAG (max depth) %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Flag all casts that don't go deep enough
flagit = [];
for i = 1:length(meop_ts)
	for j = 1:length(meop_ts(i).cast)
		tmpdat = [meop_ts(i).temp(:,j) + meop_ts(i).salt(:,j)];
		ind = find(isnan(tmpdat)==0);
		if dbar_grid(ind(end)) < qc.min_depth
			flagit = [flagit; i j];
		end
	end
end

%%% Remove
for i = size(flagit,1):-1:1 % (NOTE: Flipped direction of deletion (issue with deleting correct profile)
	meop_ts(flagit(i,1)).cast(flagit(i,2))   = [];
	meop_ts(flagit(i,1)).lat(flagit(i,2))    = [];
	meop_ts(flagit(i,1)).lon(flagit(i,2))    = [];
	meop_ts(flagit(i,1)).time(flagit(i,2),:) = [];
	meop_ts(flagit(i,1)).salt(:,flagit(i,2)) = [];
	meop_ts(flagit(i,1)).temp(:,flagit(i,2)) = [];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SECOND QC FLAG (time gap) %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Find where gap between casts is too large
%%% Set up a tag modifier to separate one T-S into many
tslist  = {'A','B','C','D','E','F','G','H',...
		   'I','J','K','L','M','N','O','P'};

%%% Set up a total time-series counter
tscount = 1;
for i = 1:length(meop_ts)
	% Clear loop variables
	ts_dates = []; didx = []; ind = []; tmpidx = [];
	% Find difference in dates between casts
	ts_dates = datenum(meop_ts(i).time);
	% Find where difference exceeds QC threshold (max time between casts)
	didx     = diff(ts_dates)<qc.max_time_gap;
	% Find the gaps greater than QC threshold 
	ind      = find(didx == 1); 
	% Clear start of time-series
	ts_start = []; ts_end = []; ts_cnt = 1;
	if isempty(ind);
		% No good groups found, go to next MEOP time-series
		continue
	elseif length(ind)==1
		% Only one group of consecutive casts exist
		tmpidx{ts_cnt} = [ind:ind+1];
	else
		% Many groups exist, separate them
		for j = 1:length(ind);
			if isempty(ts_start)
				ts_start = ind(j);
			end
			if j < length(ind) & ismember(ind(j)+1,ind);
				continue;
			else
				ts_end = ind(j)+1;
				tmpidx{ts_cnt} = [ts_start:ts_end];
				ts_start = []; ts_end = [];
				ts_cnt = ts_cnt + 1;
			end
		end
	end
	% Assign 'good' consecutive casts into separate time-series	
	for j = 1:length(tmpidx)
		qc_ts(tscount).tag  = [num2str(meop_ts(i).tag),tslist{j}];
		%%% Save as QC'd timeseries
		qc_ts(tscount).cast = meop_ts(i).cast(tmpidx{j});
		qc_ts(tscount).lat  = meop_ts(i).lat(tmpidx{j});
		qc_ts(tscount).lon  = meop_ts(i).lon(tmpidx{j});
		qc_ts(tscount).time = meop_ts(i).time(tmpidx{j},:);
		qc_ts(tscount).temp = meop_ts(i).temp(:,tmpidx{j});
		qc_ts(tscount).salt = meop_ts(i).salt(:,tmpidx{j});
		%%% Increase counter
		tscount = tscount + 1;
	end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% THIRD QC FLAG (min profiles) %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Find timeseries without enough profiles
Np = [];
for i = 1:length(qc_ts)
	Np(i) = length(qc_ts(i).cast);
end
ind = find(Np < qc.min_profiles);
qc_ts(ind) = [];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DETECTION ALGORTHIM START

for tag_no = 48
    
    %%% Converting time data into datenum
    ts_time = datenum(qc_ts(tag_no).time);
    
    %%% Density calculation
    ts_density = gsw_rho(qc_ts(tag_no).salt, qc_ts(tag_no).temp, zeros(size(qc_ts(tag_no).salt,1), size(qc_ts(tag_no).salt,2)));

    %%%%%%%%%%%%%%%%%%%%%%
    %%% Newest Version %%%
    %%%%%%%%%%%%%%%%%%%%%%
    
    %%% Absolute salinity calculation
    ts_salt_absolute = gsw_SA_from_SP(qc_ts(tag_no).salt, depth_grid', qc_ts(tag_no).lon, qc_ts(tag_no).lat);
    
    %%% Conservative temperature calculation
    ts_temp_conservative = gsw_CT_from_t(ts_salt_absolute, qc_ts(tag_no).temp, depth_grid');
    
    %%% Spiciness calculation
    ts_spice = gsw_spiciness0(ts_salt_absolute, ts_temp_conservative);
    
    %%% Stratification calculation
    [ts_Nsquared,~] = gsw_Nsquared(ts_salt_absolute, ts_temp_conservative, depth_grid' .* ones(size(qc_ts(tag_no).salt)), qc_ts(tag_no).lat .* ones(size(qc_ts(tag_no).salt)));
    
    %%% PV calculation
    ts_dp_dz = diff(ts_density, 1);
    ts_pv = -gsw_f(qc_ts(tag_no).lat) .* ts_dp_dz;
    
    %%% Dynamic Height Anomaly calculation
    ts_dha = gsw_geo_strf_dyn_height(ts_salt_absolute, ts_temp_conservative, depth_grid', 10);
    
    %%% Identifying outliers (using a moving mean across 12 days)
    ts_dates_tda = {};
    j = 1;
    for i = ts_time'
        ts_dates_tda(1,j) = {find(ts_time < i-1 & ts_time > i-7)};
        ts_dates_tda(2,j) = {find(ts_time > i+1 & ts_time < i+7)};
        j = j + 1;
    end
    
    %%% Identifying spice outliers
    outliers_spice = outlier_detection_date_version(ts_spice, ts_dates_tda);
    
    %%% Identifying N-squared outliers
    outliers_Nsquared = outlier_detection_date_version(ts_Nsquared, ts_dates_tda);
    
    %%% Identifying PV outliers
    outliers_pv = outlier_detection_date_version(ts_pv, ts_dates_tda);
    
    %%% Identifying dynamic height anomaly outliers
    outliers_dha = outlier_detection_date_version(ts_dha, ts_dates_tda);
    
    figure('Renderer', 'painters', 'Position', [10 10 1000 1000])
    %%% PV subplot
    ax1 = subplot(7,1,1);
    pcolor_plots(ts_time, ts_dha);
    cmap = cmocean('thermal');
    colormap(ax1, cmap);
    colorbar;
    title('Dynamic Height Anomaly');
    
    %%% PV outliers subplot
    ax2 = subplot(7,1,2);
    pcolor_plots(ts_time, outliers_dha);
    cmap = cmocean('thermal');
    colormap(ax2, cmap);
    caxis([0 1]);
    colorbar;
    title('Dynamic Height Anomaly Outliers');
    
    %%% Spice subplot
    ax3 = subplot(7,1,3);
    pcolor_plots(ts_time, ts_spice);
    cmap = cmocean('thermal');
    colormap(ax3, cmap);
    colorbar;
    title('Spice');
    
    %%% Spice outliers subplot
    ax4 = subplot(7,1,4);
    pcolor_plots(ts_time, outliers_spice);
    colormap(ax4, cmap);
    caxis([0 1]);
    colorbar;
    title('Spice Outliers');
    
    %%% N-squared subplot
    ax5 = subplot(7,1,5);
    pcolor_plots(ts_time, ts_Nsquared);
    colormap(ax5, cmap);
    colorbar;
    title('N^2');
    
    %%% N-squared outliers subplot
    ax6 = subplot(7,1,6);
    pcolor_plots(ts_time, outliers_Nsquared);
    colormap(ax6, cmap);
    colorbar;
    caxis([0 1]);
    title('N^2 Outliers');
    
    %%% Finding intersection between outlier subplots
    outliers_both = [];
    for i = 1:size(outliers_Nsquared,1)
        for j = 1:size(outliers_Nsquared, 2)
            if outliers_Nsquared(i,j) == 1
                if outliers_spice(i,j) == 1
                    outliers_both(i,j) = 1;
                else
                    outliers_both(i,j) = 0;
                end
            else
                outliers_both(i,j) = 0;
            end
        end
    end
    
    %%% Outlier intersection subplot
    ax7 = subplot(7,1,7);
    pcolor_plots(ts_time, outliers_both);
    cmap = cmocean('thermal');
    colormap(ax7, cmap);
    colorbar;
    caxis([0 1]);
    xticks(linspace(ts_time(1), ts_time(end), (ts_time(end) - ts_time(1)) / 5));
    datetick('x', 'mm/dd', 'keepticks');
    title('Intersection of Spice and N^2 Outliers')

    %%% Creating y-axis isopycnal separation calculation
    isopycnal_dist_y_axis = 1027.3:0.01:max(max(ts_density));

    %%% Calculating isopycnal separation
    isopycnal_dist = [];
    for i = 1:length(ts_time)
        u = 1;
        for j = isopycnal_dist_y_axis
            isopycnal_dist(u,i) = length(find(ts_density(:,i) <= j & ts_density(:,i) >= (j - 0.1)));
            u = u + 1;
        end
    end

    %%% Setting 0 isopycnal separation values to NaN
    isopycnal_dist(isopycnal_dist == 0) = NaN;
    
%     %%% Identifying outliers (using a moving mean)
%     outliers = [];
%     for i = 1:size(isopycnal_dist, 1)
%         for j = 1:size(isopycnal_dist, 2)
%             
%             %%% Indices for outlier detection
%             movMat_before = isopycnal_dist(i, max(j-40, 1):max(j-10,1));
%                 
%             movMat_after = isopycnal_dist(i, min(j+10, size(isopycnal_dist, 2)):min(j+40, ...
%                 size(isopycnal_dist, 2)));
%             
%             %%% Outlier detection
%             outliers_movMat = isoutlier([movMat_before isopycnal_dist(i,j) movMat_after]);
%             
%             outliers(i,j) = outliers_movMat(length(movMat_before) + 1);
%         end
%     end
%     
%     %%% Identifying outliers (using a moving mean across 12 days)
%     ts_dates_tda = {};
%     j = 1;
%     for i = ts_time'
%         ts_dates_tda(1,j) = {find(ts_time < i-1 & ts_time > i-6)};
%         ts_dates_tda(2,j) = {find(ts_time > i+1 & ts_time < i+6)};
%         j = j + 1;
%     end
%     
%     outliers_tda = [];
%     for i = 1:size(isopycnal_dist, 1)
%         for j = 1:size(isopycnal_dist, 2)
%             movMat_before = isopycnal_dist(i, ts_dates_tda{1,j});
%             
%             movMat_after = isopycnal_dist(i, ts_dates_tda{2,j});
%             
%             outliers_movMat_tda = isoutlier([movMat_before isopycnal_dist(i,j) movMat_after]);
%             
%             outliers_tda(i,j) = outliers_movMat_tda(length(movMat_before) + 1);
%         end
%     end
% 
%     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     %%% Removing Insignificant Outliers %%%
%     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     
%     %%% Summing outliers in a small matrix around each index
%     sum_outliers = [];
%     for i = 1:size(outliers, 1)
%         for j = 1:size(outliers, 2)
%             sum_outliers(i,j) = sum(outliers(max(i-4,1):min(i+4,size(outliers, 1)),max(j-2,1):min(j+2,size(outliers,2))), 'all');
%         end
%     end
%     
%     %%% Removing insignificant outliers
%     outliers(sum_outliers < 22.5) = 0;
%     
%     %%% Removing outliers in the beginning and end of the time series
%     beg_end_interval = 10;
%     outliers(:,[1:beg_end_interval (length(outliers) - beg_end_interval):length(outliers)]) = 0;
%     
%     %%%%%% PART 2
%     
%     %%% Summing outliers in a small matrix around each index
%     sum_outliers = [];
%     for i = 1:size(outliers_tda, 1)
%         for j = 1:size(outliers_tda, 2)
%             sum_outliers(i,j) = sum(outliers_tda(max(i-4,1):min(i+4,size(outliers_tda, 1)),max(j-2,1):min(j+2,size(outliers_tda,2))), 'all');
%         end
%     end
%     
%     %%% Removing insignificant outliers
%     outliers_tda(sum_outliers < 22.5) = 0;
%     
%     %%% Removing outliers in the beginning and end of the time series
%     beg_end_interval = 10;
%     outliers_tda(:,[1:beg_end_interval (length(outliers_tda) - beg_end_interval):length(outliers_tda)]) = 0;
%    
%     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     %%% Figure Creation (PART 2) %%%
%     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     fig = figure('Renderer', 'painters', 'Position', [100 100 1300 1000]);
%     sgtitle('MEOP Tag: ' + string(qc_ts(tag_no).tag) + ' - Date Method', 'FontSize', 18, 'FontWeight', 'bold')
%     
%     %%% Salinity subplot
%     ax1 = subplot(4,1,1);
%     time_series_gen(ts_time, depth_grid,'pressure', qc_ts(tag_no).salt, 'salinity', ax1, 'meop')
%     contours(ts_time, depth_grid, 'density', qc_ts(tag_no).salt, qc_ts(tag_no).temp)
%     xticks(linspace(ts_time(1), ts_time(end), (ts_time(end) - ts_time(1)) / 5))
%     xlim([ts_time(1) ts_time(end)]);
%     datetick('x', 'mm/dd', 'keepticks');
%     
%     %%% Temperature subplot
%     ax2 = subplot(4,1,2);
%     time_series_gen(ts_time, depth_grid,'pressure', qc_ts(tag_no).temp, 'temperature', ax2, 'meop')
%     contours(ts_time, depth_grid, 'density', qc_ts(tag_no).salt, qc_ts(tag_no).temp)
%     xticks(linspace(ts_time(1), ts_time(end), (ts_time(end) - ts_time(1)) / 5))
%     xlim([ts_time(1) ts_time(end)]);
%     datetick('x', 'mm/dd', 'keepticks');
%     
%     %%% Isopycnal Separation subplot
%     ax3 = subplot(4,1,3);
%     p = pcolor(ax3, ts_time, isopycnal_dist_y_axis, isopycnal_dist);  
%     set(p, 'EdgeColor', 'none');
%     set(gca, 'YDir','reverse');
%     set(gca, 'Layer','top');
%     cmap = cmocean('thermal');
%     colormap(ax3, cmap);
%     colorbar;
%     xticks(linspace(ts_time(1), ts_time(end), (ts_time(end) - ts_time(1)) / 5))
%     datetick('x', 'mm/dd', 'keepticks');
%     title('Isopycnal Separation')
%     
%     %%% Outliers subplot
%     ax4 = subplot(4,1,4);
%     p = pcolor(ax4, ts_time, isopycnal_dist_y_axis, outliers_tda);
%     set(p, 'EdgeColor', 'none');
%     set(gca, 'YDir','reverse');
%     set(gca, 'Layer','top');
%     cmap = cmocean('thermal');
%     colormap(ax4, cmap);
%     caxis([0 1]);
%     colorbar;
%     xticks(linspace(ts_time(1), ts_time(end), (ts_time(end) - ts_time(1)) / 5))
%     xlim([ts_time(1) ts_time(end)]);
%     datetick('x', 'mm/dd', 'keepticks');
%     title('Outliers')
%     
%     saveas(fig, '/Users/jenkosty/Downloads/detectSCV-main/MEOP Time Series/Outliers_Date_Method/MEOP TS ' + string(qc_ts(tag_no).tag), 'png')
end

function o = outlier_detection_date_version(colorbar_variable, date_indexes)
        %%% Initializing outlier matrix
        o = zeros(size(colorbar_variable));
        
        %%% Loop through data to find outliers over the course of a given
        %%% time window
        for i = 1:size(colorbar_variable,1)
            for j = 1:size(colorbar_variable,2)
                
                movMat_before = colorbar_variable(i, date_indexes{1,j});
                
                movMat_after = colorbar_variable(i, date_indexes{2,j});
                
                outliers_gen = isoutlier([movMat_before colorbar_variable(i,j) movMat_after]);
                
                o(i,j) = double(outliers_gen(length(movMat_before) + 1));
            end
        end
end
    
function pp = pcolor_plots(x_axis, colorbar)
    pp = pcolor(x_axis, 1:size(colorbar,1), colorbar);
    set(pp, 'EdgeColor', 'none');
    set(gca, 'YDir','reverse');
    set(gca, 'Layer','top');
    xticks([''])
    xlim([x_axis(1) x_axis(end)]);
end
